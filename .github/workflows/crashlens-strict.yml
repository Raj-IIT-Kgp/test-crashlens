# Example: Strict CrashLens CI Enforcement (Build-Breaking)
# Copy to .github/workflows/crashlens-strict.yml in your own repo.
# WARNING: This workflow WILL FAIL your builds if limits are exceeded.

name: CrashLens Strict CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  crashlens-analysis:
    runs-on: ubuntu-latest
    name: Strict Token Waste & Cost Enforcement

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install CrashLens and Dependencies
        run: |
          pip install crashlens
          sudo apt-get update && sudo apt-get install -y jq bc

      - name: Verify log files exist
        run: |
          echo "üîç Checking for log files..."
          if [ ! -d ".llm_logs" ]; then
            echo "‚ùå Missing .llm_logs directory"
            echo "üìÅ Repository structure:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Found .llm_logs directory"
          ls -la .llm_logs/
          
          if ! ls .llm_logs/*.jsonl 1> /dev/null 2>&1; then
            echo "‚ùå No .jsonl log files found in .llm_logs/"
            echo "üìÅ Contents:"
            ls -la .llm_logs/
            exit 1
          fi
          
          echo "‚úÖ Found log files:"
          ls -la .llm_logs/*.jsonl

      - name: Copy logs to working directory
        run: |
          mkdir -p logs 
          cp .llm_logs/*.jsonl logs/
          echo "üìã Copied log files:"
          ls -la logs/
          echo "üìä Log file sizes:"
          wc -l logs/*.jsonl

      - name: Enforce Waste & Cost Limits
        run: |
          echo "üí∞ Enforcing strict cost and performance limits..."
          
          # üîß STRICT LIMITS - Adjust these values as needed
          DAILY_COST_LIMIT=5.00       # üí∞ Fail if total cost exceeds $5/day
          SLOW_RESPONSE_LIMIT=20      # ‚è±Ô∏è Fail if >20 slow traces
          EXPENSIVE_REQUEST_LIMIT=10  # üí∏ Fail if >10 expensive requests
          ERROR_RATE_THRESHOLD=0.20   # ‚ùó Fail if >20% error rate
          
          echo "üìã Enforcement Thresholds:"
          echo "   Daily cost limit: \$${DAILY_COST_LIMIT}"
          echo "   Slow response limit: ${SLOW_RESPONSE_LIMIT} traces"
          echo "   Expensive request limit: ${EXPENSIVE_REQUEST_LIMIT} requests"
          echo "   Error rate threshold: ${ERROR_RATE_THRESHOLD}"
          
          # Calculate metrics from logs
          total_cost=$(cat logs/*.jsonl | jq -r '.cost // .totalCost // 0' 2>/dev/null | awk '{sum+=$1} END {print sum ? sum : 0}')
          slow_traces=$(cat logs/*.jsonl | jq -r 'select(.usage.total_tokens > 1000 or (.metadata.processing_time_ms // 0) > 3000)' 2>/dev/null | wc -l)
          expensive_requests=$(cat logs/*.jsonl | jq -r 'select((.cost // .totalCost // 0) > 0.05)' 2>/dev/null | wc -l)
          total_requests=$(cat logs/*.jsonl | wc -l)
          error_count=$(cat logs/*.jsonl | jq -r 'select(.level == "error" or .status == "error")' 2>/dev/null | wc -l)
          
          # Calculate error rate (handle division by zero)
          if [ "$total_requests" -gt 0 ]; then
            error_rate=$(echo "scale=3; $error_count / $total_requests" | bc -l)
          else
            error_rate=0
          fi

          echo ""
          echo "üìä Current Metrics:"
          echo "   üí∞ Total cost: \$${total_cost}"
          echo "   üê¢ Slow traces: ${slow_traces}"
          echo "   üí∏ Expensive requests: ${expensive_requests}"
          echo "   üìä Total requests: ${total_requests}"
          echo "   ‚ùó Error count: ${error_count}"
          echo "   üìà Error rate: ${error_rate}"

          # Check limits and fail if exceeded
          fail=false
          violations=()
          
          if (( $(echo "$total_cost > $DAILY_COST_LIMIT" | bc -l) )); then
            echo "üö® VIOLATION: Cost limit exceeded (\$${total_cost} > \$${DAILY_COST_LIMIT})"
            violations+=("Cost limit exceeded")
            fail=true
          fi
          
          if [ "$slow_traces" -gt "$SLOW_RESPONSE_LIMIT" ]; then
            echo "üö® VIOLATION: Too many slow traces (${slow_traces} > ${SLOW_RESPONSE_LIMIT})"
            violations+=("Too many slow traces")
            fail=true
          fi
          
          if [ "$expensive_requests" -gt "$EXPENSIVE_REQUEST_LIMIT" ]; then
            echo "üö® VIOLATION: Too many expensive requests (${expensive_requests} > ${EXPENSIVE_REQUEST_LIMIT})"
            violations+=("Too many expensive requests")
            fail=true
          fi
          
          if (( $(echo "$error_rate > $ERROR_RATE_THRESHOLD" | bc -l) )); then
            echo "üö® VIOLATION: Error rate too high (${error_rate} > ${ERROR_RATE_THRESHOLD})"
            violations+=("Error rate too high")
            fail=true
          fi
          
          # Summary
          if [ "$fail" = true ]; then
            echo ""
            echo "üí• STRICT CI ENFORCEMENT FAILED"
            echo "‚ùå Violations detected:"
            printf '   - %s\n' "${violations[@]}"
            echo ""
            echo "üîß To fix these issues:"
            echo "   1. Optimize expensive API calls"
            echo "   2. Implement better retry logic"
            echo "   3. Use cheaper models for simple tasks"
            echo "   4. Fix error-prone operations"
            echo ""
            exit 1
          else
            echo ""
            echo "‚úÖ All strict limits passed!"
            echo "üéâ No cost or performance violations detected"
          fi

      - name: Run CrashLens Policy Checks (Strict Mode)
        run: |
          echo "üîç Running strict CrashLens policy checks..."
          
          # Run policy check with fail-on-violations flag
          crashlens policy-check logs/*.jsonl \
            --policy-template all \
            --severity-threshold high \
            --fail-on-violations
          
          echo "‚úÖ CrashLens policy checks passed!"

      - name: Generate Strict Enforcement Report
        if: always()
        run: |
          echo "üìÑ Generating strict enforcement report..."
          
          cat > strict-enforcement-report.md << 'EOF'
          # üö® CrashLens Strict CI Enforcement Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Enforcement Mode:** STRICT (Build-breaking enabled)
          
          ## üéØ Enforcement Results
          
          This workflow enforces strict limits on:
          - üí∞ Daily cost limits (5.00 maximum)
          - ‚è±Ô∏è Response time performance (max 20 slow traces)
          - üí∏ Expensive request limits (max 10 requests >$0.05)
          - ‚ùó Error rate thresholds (max 20% error rate)
          - üîç All CrashLens policy violations (high+ severity)
          
          ## üìä Current Status
          
          $(if [ $? -eq 0 ]; then
            echo "‚úÖ **ALL LIMITS PASSED** - No violations detected"
            echo "üéâ Your AI usage is within acceptable cost and performance bounds"
          else
            echo "‚ùå **ENFORCEMENT FAILED** - Violations detected"
            echo "üö® Build was terminated due to policy violations"
            echo "üìã Review the workflow logs for specific violation details"
          fi)
          
          ## üîß Configuration
          
          **Strict Limits Applied:**
          - Maximum daily cost: 5.00
          - Maximum slow traces: 20
          - Maximum expensive requests: 10  
          - Maximum error rate: 20%
          - Policy severity threshold: High
          
          ---
          *Enforced by CrashLens Strict CI*
          EOF

      - name: Upload Strict Enforcement Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: strict-enforcement-results-${{ github.run_number }}
          path: |
            strict-enforcement-report.md
            logs/*.jsonl
          retention-days: 7

      # üîî Slack Integration - Add your SLACK_WEBHOOK_URL secret
      - name: Send Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          custom_payload: |
            {
              "text": "‚ö†Ô∏è CrashLens Strict Enforcement Complete",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Strict CrashLens Enforcement*\n‚Ä¢ Repository: ${{ github.repository }}\n‚Ä¢ Branch: ${{ github.ref_name }}\n‚Ä¢ Status: ${{ job.status }}\n‚Ä¢ Limits: Daily $5, 20 slow traces, 10 expensive requests\n‚Ä¢ Run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ job.status == 'success' && '‚úÖ All limits enforced successfully' || '‚ùå Policy violations detected - build failed' }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}